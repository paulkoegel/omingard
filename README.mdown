![Omingard Logo](/omingard-logo.png)

# Omingard
Port of Better Solitaire [Irmingard](http://irmingard.herokuapp.com) to [ClojureScript](https://github.com/clojure/clojurescript) and [Om](https://github.com/swannodette/om).  
Original implementation with [CoffeeScript](http://coffeescript.org) and [Backbone Marionette](http://marionettejs.com):
[irmingard-backbone](https://github.com/paulwittmann/irmingard-backbone).

Pull requests are very welcome!

### Demo
[![screenshot of Omingard](/screenshot_omingard.png)](https://omingard.5apps.com)

Omingard is still work in progress.  
For a more fleshed out version - not written in Om - check out the
[original implementation](http://irmingard.herokuapp.com):

[![screenshot of Irmingard](/screenshot_irmingard.png)](http://irmingard.herokuapp.com)

Found a bug? Please create a new [issue](https://github.com/paulwittmann/omingard/issues) - thanks!

### Notable Features
+ Undo, which comes almost for free thanks to Om and ClojureScript's persistent data structures (cf. ["Time Travel" - David Nolen](https://swannodette.github.io/2013/12/31/time-travel)).

### Planned Features
Planned features that go beyond the original version:
+ mobile friendliness: support touch events, present good mobile UI.
+ play offline.

### Setup
Check out this repository:

    git clone git@github.com:paulwittmann/omingard.git

Watch for ClojureScript changes:

    lein cljsbuild auto

Watch for CSS changes - preprocessor language: [Garden](https://github.com/noprompt/garden) via [lein-garden](https://github.com/noprompt/lein-garden) - with:

    lein garden auto

Start a web server:

    python -m SimpleHTTPServer

Open `http://localhost:8000`.

Refer to the excellent [Lighttable ClojureScript tutorial](https://github.com/swannodette/lt-cljs-tutorial) for integrating a ClojureScript REPL with Lighttable.
Or [Perfect ClojureScript Development Environment With Vim](https://astashov.github.io/blog/2014/07/30/perfect-clojurescript-development-environment-with-vim) for the same with vim.
You should easily find similar tutorials for Emacs - e.g. [Austin](https://github.com/cemerick/austin).

Also have a look at [Weasel](https://github.com/tomjakubowski/weasel) and [Figwheel](https://github.com/bhauman/lein-figwheel).

### Production
+ run `lein cljsbuild once production`
+ open `http://localhost:8000/prod.html`
+ create a directory above the project directory named `deploy`
+ run `./build.sh` to copy relevant files to `../deploy` (ignore warnings about `public/out` not being included, we don't need it)
+ deploy code from `../deploy` to 5apps

### something difference
